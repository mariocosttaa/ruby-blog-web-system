<!DOCTYPE html>
<html lang="en" data-theme="dark" style="background-color: var(--bg-color); color: var(--text-color);">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= content_for(:title) || "Admin Panel - MarioTechPortal" %></title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    <%= yield :head %>

    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.tailwindcss.com/typography@3.4.16"></script>
    <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;700&family=Poppins:wght@700&display=swap" rel="stylesheet">
    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    
    <!-- Theme initialization script - prevents flash -->
    <script>
      // Apply theme immediately to prevent flash
      (function() {
        const savedTheme = localStorage.getItem('theme') || 'dark';
        document.documentElement.setAttribute('data-theme', savedTheme);
      })();
    </script>
  </head>
  <body class="min-h-screen flex flex-col" style="background-color: var(--bg-color); color: var(--text-color);">
    
    <!-- Navbar -->
    <%= render "layouts/panel/parts/navbar" %>

    <main class="flex-grow pt-12 px-4 sm:px-6 lg:px-8 py-6">
      <%= yield %>
    </main>
    
    <!-- Footer -->
    <%= render "layouts/panel/parts/footer" %>
    
    <!-- JavaScript -->
    <script>
      // Global variables for theme toggle
      let themeToggleBtn, mobileThemeToggleBtn;
      
      // Theme Toggle
      function toggleTheme() {
          const html = document.documentElement;
          const currentTheme = html.getAttribute('data-theme');
          const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
          
          html.setAttribute('data-theme', newTheme);
          localStorage.setItem('theme', newTheme);
          
          
          // Update theme toggle icon
          if (themeToggleBtn) {
              const svg = themeToggleBtn.querySelector('svg path');
              if (svg) {
                  if (newTheme === 'dark') {
                      svg.setAttribute('d', 'M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z');
                  } else {
                      svg.setAttribute('d', 'M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z');
                  }
              }
          }
          
          // Update mobile theme toggle icon
          if (mobileThemeToggleBtn) {
              const svg = mobileThemeToggleBtn.querySelector('svg path');
              if (svg) {
                  if (newTheme === 'dark') {
                      svg.setAttribute('d', 'M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z');
                  } else {
                      svg.setAttribute('d', 'M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z');
                  }
              }
          }
      }

      // Mobile menu toggle
      function toggleMobileMenu() {
          const mobileMenu = document.getElementById('mobile-menu');
          mobileMenu.classList.toggle('hidden');
      }

      // Initialize
      document.addEventListener('DOMContentLoaded', function() {
          // Apply saved theme
          const savedTheme = localStorage.getItem('theme') || 'dark';
          document.documentElement.setAttribute('data-theme', savedTheme);
          
          // Theme toggle functionality
          themeToggleBtn = document.getElementById('theme-toggle-btn');
          mobileThemeToggleBtn = document.getElementById('mobile-theme-toggle-btn');
          
          // Set correct theme toggle icon
          if (themeToggleBtn) {
              const svg = themeToggleBtn.querySelector('svg path');
              if (svg) {
                  if (savedTheme === 'dark') {
                      svg.setAttribute('d', 'M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z');
                  } else {
                      svg.setAttribute('d', 'M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z');
                  }
              }
          }
          
          if (themeToggleBtn) {
              themeToggleBtn.addEventListener('click', function(e) {
                  e.preventDefault();
                  toggleTheme();
              });
          }
          
          if (mobileThemeToggleBtn) {
              mobileThemeToggleBtn.addEventListener('click', function(e) {
                  e.preventDefault();
                  toggleTheme();
              });
          }

          // Mobile menu functionality
          const mobileMenuBtn = document.getElementById('mobile-menu-btn');
          if (mobileMenuBtn) {
              mobileMenuBtn.addEventListener('click', toggleMobileMenu);
          }

          // Add fade-in animation on scroll
          const observerOptions = {
              threshold: 0.1,
              rootMargin: '0px 0px -50px 0px'
          };

          const observer = new IntersectionObserver(function(entries) {
              entries.forEach(entry => {
                  if (entry.isIntersecting) {
                      entry.target.style.opacity = '1';
                      entry.target.style.transform = 'translateY(0)';
                  }
              });
          }, observerOptions);

          // Observe all elements with .animate-on-scroll
          document.querySelectorAll('.animate-on-scroll').forEach(element => {
              element.style.opacity = '0';
              element.style.transform = 'translateY(20px)';
              element.style.transition = 'opacity 0.6s ease-out, transform 0.6s ease-out';
              observer.observe(element);
          });
      });

    </script>
  </body>
</html>
